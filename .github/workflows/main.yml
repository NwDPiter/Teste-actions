name: Update Docker Image

on:
  schedule:
    - cron: '0 0 * * *'  # Executa uma vez por dia às 00:00 UTC
  workflow_dispatch:  # Permite iniciar manualmente através da interface do GitHub

jobs:
  update-image:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker CLI
      uses: docker/setup-buildx-action@v2

    - name: Find the latest Docker image tag
      id: find_latest_tag
      run: |
        USERNAME="deploy164"
        REPOSITORY="deploy164"
        latest_tag=$(curl -s "https://hub.docker.com/v2/repositories/${USERNAME}/${REPOSITORY}/tags?page_size=100" | jq -r '.results[].name' | sort -V | tail -n 1)
        echo "LATEST_TAG=${latest_tag}" >> $GITHUB_ENV

    - name: Update Docker image in Portainer
      env:
        PORTAINER_URL: ${{ secrets.PORTAINER_URL }}
        PORTAINER_API_TOKEN: ${{ secrets.PORTAINER_API_TOKEN }}
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
        CONTAINER_NAME: ${{ secrets.PORTAINER_CONTAINER_NAME }}
      run: |
        # Find container ID by name
        container_id=$(curl -s -X GET "${PORTAINER_URL}/api/endpoints/1/docker/containers/json?all=true&filters={\"name\":[\"${CONTAINER_NAME}\"]}&access_token=${PORTAINER_API_TOKEN}" | jq -r '.[0].Id')
        
        # Check if container ID was found
        if [ -z "$container_id" ]; then
          echo "Container with name ${CONTAINER_NAME} not found."
          exit 1
        fi

        # Update the container image
        curl -s -X POST "${PORTAINER_URL}/api/endpoints/1/docker/containers/${container_id}/update?access_token=${PORTAINER_API_TOKEN}" -H "Content-Type: application/json" -d "{\"Image\": \"${USERNAME}/${REPOSITORY}:${LATEST_TAG}\"}"
